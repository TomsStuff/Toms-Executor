-- Define the services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

-- Store original Ammo values
local originalAmmoValues = {}
local isUpdated = false

-- Function to update Ammo values
local function updateAmmoValues(newAmmo)
    if isUpdated then
        return -- If Ammo values have already been updated, exit the function
    end

    -- Ensure the newAmmo is a positive value greater than zero to avoid any issues
    if newAmmo <= 0 then
        warn("Ammo must be a positive value greater than 0.")
        return
    end

    -- Try to find the "Weapons" folder in ReplicatedStorage
    local weaponsFolder = ReplicatedStorage:FindFirstChild("Weapons")

    -- Check if the "Weapons" folder was found
    if weaponsFolder then
        print("Weapons folder found!")

        for _, weapon in pairs(weaponsFolder:GetChildren()) do
            -- Check if the child is a folder (assuming each weapon is stored in a folder)
            if weapon:IsA("Folder") then
                -- Try to find the Ammo value in the weapon folder
                local ammoValue = weapon:FindFirstChild("Ammo")

                -- Check if the Ammo value was found and is an IntValue
                if ammoValue and ammoValue:IsA("IntValue") then
                    -- Store original Ammo value
                    if not originalAmmoValues[weapon] then
                        originalAmmoValues[weapon] = ammoValue.Value
                    end

                    -- Update Ammo value
                    ammoValue.Value = newAmmo
                    print("Updated Ammo for weapon: " .. weapon.Name .. " to value: " .. newAmmo)
                else
                    print("Ammo value not found or is not an IntValue for weapon: " .. weapon.Name)
                end
            else
                print("Child is not a folder, skipping: " .. weapon.Name)
            end
        end
    else
        print("Weapons folder not found.")
    end

    isUpdated = true -- Set the flag to indicate Ammo values have been updated
end

-- Function to reset Ammo values to original values
local function resetAmmoValues()
    for weapon, originalValue in pairs(originalAmmoValues) do
        local ammoValue = weapon:FindFirstChild("Ammo")
        if ammoValue and ammoValue:IsA("IntValue") then
            ammoValue.Value = originalValue
            print("Reset Ammo for weapon: " .. weapon.Name .. " to value: " .. originalValue)
        end
    end
    -- Clear the stored values after resetting
    originalAmmoValues = {}
    isUpdated = false -- Reset the flag after Ammo values have been reset
end

-- Function to handle player spawn
local function onPlayerSpawn(player)
    player.CharacterAdded:Connect(function(character)
        -- Wait 1 second after the character has been added
        wait(1)
        -- Call the function to update Ammo values
        updateAmmoValues(1453874) -- Replace 600 with the desired Ammo value that you want to set
    end)

    -- Find the ScoreFolder in the player's PlayerGui
    local playerGui = player:WaitForChild("PlayerGui", 0.2) -- Wait for up to 10 seconds for the PlayerGui to be available
    if playerGui then
        local scoreFolder = playerGui:WaitForChild("ScoreFolder", 0.2) -- Wait for up to 10 seconds for the ScoreFolder to be available
        if scoreFolder then
            -- Find the Kills IntValue
            local killsValue = scoreFolder:WaitForChild("Kills", 0.2) -- Wait for up to 10 seconds for the Kills IntValue to be available
            if killsValue then
                -- Connect a function to the Kills IntValue's Changed event
                killsValue.Changed:Connect(function(newValue)
                    print("Kills value changed to: " .. tostring(newValue))
                    updateAmmoValues(600) -- Replace 600 with the desired Ammo value that you want to set
                end)
            else
                warn("Kills IntValue not found in ScoreFolder")
            end
        else
            warn("ScoreFolder not found in PlayerGui for player: " .. player.Name)
        end
    else
        warn("PlayerGui not found for player: " .. player.Name)
    end
end

-- Connect PlayerAdded event to handle new players
Players.PlayerAdded:Connect(onPlayerSpawn)

-- Optional: Handle existing players if the script runs after some players have already joined
for _, player in pairs(Players:GetPlayers()) do
    onPlayerSpawn(player)
end

-- Run the updateAmmoValues function immediately when the script is executed
updateAmmoValues(1453874) -- Replace 600 with the desired Ammo value that you want to set
