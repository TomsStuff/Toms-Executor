--// services
local run_service = game:GetService("RunService")
local teams = game:GetService("Teams")
local players = game:GetService("Players")
local camera = workspace.CurrentCamera

--// variables
local vec2 = Vector2.new
local storage = { esp_cache = {} }
local features = {
    box = {
        color = Color3.fromRGB(255, 255, 255),
        borderSizePixel = 1,
    },
    tracer = {
        color = Color3.fromRGB(255, 255, 255),
        thickness = 1
    },
    distance_text = {
        size = 14,
        color = Color3.fromRGB(255, 255, 255),
    }
}

--// functions
function get_players()
    local entity_list = {}
    for _, team in ipairs(workspace.Players:GetChildren()) do
        for _, player in ipairs(team:GetChildren()) do
            if player:IsA("Model") then
                table.insert(entity_list, player)
            end
        end
    end
    return entity_list
end

function is_enemy(player)
    local localPlayerTeam = players.LocalPlayer.Team
    local helmet = player:FindFirstChildWhichIsA("Folder") and player:FindFirstChildWhichIsA("Folder"):FindFirstChildOfClass("MeshPart")
    if not helmet then return false end

    local playerColor = helmet.BrickColor.Name
    if playerColor == "Black" and localPlayerTeam.Name == "Phantoms" then
        return false
    elseif playerColor ~= "Black" and localPlayerTeam.Name == "Ghosts" then
        return false
    end
    return true
end

function cache_object(object)
    if not storage.esp_cache[object] then
        storage.esp_cache[object] = {
            box_square = Drawing.new("Square"),
            tracer_line = Drawing.new("Line"),
            distance_label = Drawing.new("Text") -- Create a text label for distance
        }
    end
end

function uncache_object(object)
    if storage.esp_cache[object] then
        for _, cached_instance in pairs(storage.esp_cache[object]) do
            cached_instance:Remove()
        end
        storage.esp_cache[object] = nil
    end
end

function get_bodypart(player, bodypart_name)
    for _, bodypart in player:GetChildren() do
        if bodypart:IsA("BasePart") then
            local mesh = bodypart:FindFirstChildOfClass("SpecialMesh")
            if mesh and mesh.MeshId == "rbxassetid://4049240078" then -- Torso MeshId
                return bodypart
            end
        end
    end
    return nil
end

--// main loop
run_service.RenderStepped:Connect(function()
    for _, player in ipairs(get_players()) do
        if is_enemy(player) then
            cache_object(player)
        end
    end

    for player, cache in pairs(storage.esp_cache) do
        if player then
            local torso = get_bodypart(player, "Torso")
            if torso then
                local w2s, onscreen = camera:WorldToViewportPoint(torso.Position)

                if onscreen then
                    -- Calculate scale based on distance and camera FOV
                    local scale = 1000 / (camera.CFrame.Position - torso.Position).Magnitude * 80 / camera.FieldOfView
                    local box_scale = vec2(math.round(3 * scale), math.round(4 * scale))

                    -- Set box dimensions and position
                    cache.box_square.Visible = true
                    cache.box_square.Color = features.box.color
                    cache.box_square.Thickness = features.box.borderSizePixel
                    cache.box_square.Position = vec2(w2s.X - box_scale.X / 2, w2s.Y - box_scale.Y / 2)
                    cache.box_square.Size = box_scale
                    cache.box_square.Filled = false

                    -- Draw the tracer line
                    cache.tracer_line.Visible = true
                    cache.tracer_line.Color = features.tracer.color
                    cache.tracer_line.Thickness = features.tracer.thickness
                    cache.tracer_line.From = vec2(camera.ViewportSize.X / 2, camera.ViewportSize.Y)
                    cache.tracer_line.To = vec2(w2s.X, w2s.Y)

                    -- Calculate distance and update the text label
                    local distance = math.floor((camera.CFrame.Position - torso.Position).Magnitude)
                    cache.distance_label.Visible = true
                    cache.distance_label.Text = tostring(distance) .. " studs"
                    cache.distance_label.Size = features.distance_text.size
                    cache.distance_label.Color = features.distance_text.color
                    cache.distance_label.Center = true
                    cache.distance_label.Outline = true

                    -- Position above the box, accounting for box height
                    local label_offset = 15  -- Additional offset above the box
                    cache.distance_label.Position = vec2(
                        cache.box_square.Position.X + (cache.box_square.Size.X / 2),
                        cache.box_square.Position.Y - label_offset
                    )

                else
                    uncache_object(player)
                end
            else
                uncache_object(player)
            end
        else
            uncache_object(player)
        end
    end
end)
