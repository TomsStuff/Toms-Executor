--// vars
local players = workspace.Players

--// services
local run_service = game:GetService("RunService")
local teams = game:GetService("Teams")
local plr_service = game:GetService("Players")
local core_gui = game:GetService("CoreGui") -- CoreGui to move the highlight

--// tables
local features = {
    chams = {
        teamcheck = true,
        color = {
            fill = Color3.fromRGB(255, 0, 0),
            outline = Color3.fromRGB(255, 255, 255)
        },
        transparency = {
            fill = 0,
            outline = 0
        }
    }
}

--// functions
function get_players()
    local entity_list = {}
    for _, team in players:GetChildren() do
        for _, player in team:GetChildren() do
            if player:IsA("Model") then
                entity_list[#entity_list + 1] = player
            end
        end
    end
    return entity_list
end

function is_ally(player)
    if not player then
        return false
    end

    local helmet = player:FindFirstChildWhichIsA("Folder"):FindFirstChildOfClass("MeshPart")

    if not helmet then
        return false
    end

    if helmet.BrickColor == BrickColor.new("Black") then
        return teams.Phantoms == plr_service.LocalPlayer.Team, teams.Phantoms
    end

    return teams.Ghosts == plr_service.LocalPlayer.Team, teams.Ghosts
end

--// logic
run_service.RenderStepped:Connect(function()
    local existingHighlights = {} -- Table to track existing highlights
    local playersList = get_players() -- Get the current list of players

    for _, player in playersList do
        existingHighlights[player.Name] = true -- Track the player in existingHighlights

        -- Check if the player doesn't already have a highlight in CoreGui
        local highlight = core_gui:FindFirstChild(player.Name .. "_Highlight")
        
        if not highlight then
            local is_ally, team = is_ally(player)

            if (features.chams.teamcheck and not is_ally) or not features.chams.teamcheck then
                -- Create highlight if it doesn't exist
                highlight = Instance.new("Highlight")
                highlight.Name = player.Name .. "_Highlight"
                highlight.FillColor = features.chams.color.fill
                highlight.OutlineColor = features.chams.color.outline
                highlight.FillTransparency = features.chams.transparency.fill
                highlight.OutlineTransparency = features.chams.transparency.outline
                
                -- Set the Adornee to the player's model (so the Highlight targets it)
                highlight.Adornee = player
                highlight.Parent = core_gui -- Move the highlight to CoreGui
            end
        end
    end

    -- Remove highlights for players that no longer exist
    for _, highlight in pairs(core_gui:GetChildren()) do
        if highlight:IsA("Highlight") then
            local playerName = highlight.Name:gsub("_Highlight", "")
            if not existingHighlights[playerName] then
                highlight:Destroy() -- Remove highlight for non-existing players
            end
        end
    end
end)
