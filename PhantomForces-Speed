-- Variables
getgenv().WalkSpeedValue = 0 -- Default walk speed value
getgenv().WalkSpeedEnabled = false -- Default toggle state
local uiVisible = true -- Track UI visibility state

-- Instances from RoadToGlory's Converter:
local Converted = {
    ["_ScreenGui"] = Instance.new("ScreenGui");
    ["_Frame"] = Instance.new("Frame");
    ["_UICorner"] = Instance.new("UICorner");
    ["_CurrentValue"] = Instance.new("TextLabel");
    ["_Toggle"] = Instance.new("TextButton");
    ["_UICorner1"] = Instance.new("UICorner");
    ["_Close"] = Instance.new("TextButton");
}

-- Properties for the new UI:
Converted["_ScreenGui"].ZIndexBehavior = Enum.ZIndexBehavior.Sibling
Converted["_ScreenGui"].Parent = game:GetService("CoreGui")

Converted["_Frame"].BackgroundColor3 = Color3.fromRGB(30, 30, 30)
Converted["_Frame"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_Frame"].BorderSizePixel = 0
Converted["_Frame"].Position = UDim2.new(0.297, 0, 0.397, 0)
Converted["_Frame"].Size = UDim2.new(0, 316, 0, 198)
Converted["_Frame"].Parent = Converted["_ScreenGui"]
Converted["_Frame"].Active = true
Converted["_Frame"].Draggable = true -- Makes the background draggable

Converted["_UICorner"].CornerRadius = UDim.new(0, 10)
Converted["_UICorner"].Parent = Converted["_Frame"]

Converted["_CurrentValue"].Font = Enum.Font.SourceSans
Converted["_CurrentValue"].TextColor3 = Color3.fromRGB(255, 255, 255)
Converted["_CurrentValue"].TextSize = 27
Converted["_CurrentValue"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_CurrentValue"].BackgroundTransparency = 1
Converted["_CurrentValue"].Position = UDim2.new(0, 0, 0.151, 0)
Converted["_CurrentValue"].Size = UDim2.new(0, 316, 0, 50)
Converted["_CurrentValue"].Text = "Speed: " .. getgenv().WalkSpeedValue -- Dynamic value display
Converted["_CurrentValue"].Parent = Converted["_Frame"]

Converted["_Toggle"].Font = Enum.Font.SourceSans
Converted["_Toggle"].Text = "Off"
Converted["_Toggle"].TextColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Toggle"].TextSize = 20
Converted["_Toggle"].BackgroundColor3 = Color3.fromRGB(40, 40, 40)
Converted["_Toggle"].Position = UDim2.new(0, 0, 0.747, 0)
Converted["_Toggle"].Size = UDim2.new(0, 316, 0, 50)
Converted["_Toggle"].Name = "Toggle"
Converted["_Toggle"].Parent = Converted["_Frame"]

Converted["_UICorner1"].CornerRadius = UDim.new(0, 10)
Converted["_UICorner1"].Parent = Converted["_Toggle"]

Converted["_Close"].Font = Enum.Font.SourceSans
Converted["_Close"].Text = "X"
Converted["_Close"].TextColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Close"].TextSize = 16
Converted["_Close"].BackgroundTransparency = 1
Converted["_Close"].Position = UDim2.new(0.902, 0, 0, 0)
Converted["_Close"].Size = UDim2.new(0, 31, 0, 30)
Converted["_Close"].Parent = Converted["_Frame"]

-- Close button functionality
Converted["_Close"].MouseButton1Click:Connect(function()
    Converted["_ScreenGui"]:Destroy()
end)

-- Slider elements:
local SliderBackground = Instance.new("Frame")
local SliderKnob = Instance.new("TextButton")

SliderBackground.Size = UDim2.new(0, 200, 0, 20)
SliderBackground.Position = UDim2.new(0.5, -100, 0.65, -10)
SliderBackground.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
SliderBackground.BorderSizePixel = 0
SliderBackground.Parent = Converted["_Frame"]

SliderKnob.Size = UDim2.new(0, 20, 0, 20)
SliderKnob.Position = UDim2.new(0, 0, 0, 0)
SliderKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
SliderKnob.BorderSizePixel = 0
SliderKnob.Text = ""
SliderKnob.Parent = SliderBackground

-- Function to update WalkSpeed
local function updateWalkSpeed(newSpeed)
    getgenv().WalkSpeedValue = newSpeed
    Converted["_CurrentValue"].Text = "Speed: " .. tostring(newSpeed)

    -- Get the target humanoid inside the model under Workspace.Ignore
    local targetModel = game:GetService("Workspace").Ignore:FindFirstChildOfClass("Model")
    local targetHumanoid = targetModel and targetModel:FindFirstChildOfClass("Humanoid")

    -- Ensure the target humanoid exists
    if targetHumanoid then
        -- Set the WalkSpeed when enabled
        targetHumanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
            if getgenv().WalkSpeedEnabled then
                targetHumanoid.WalkSpeed = getgenv().WalkSpeedValue
            end
        end)

        if getgenv().WalkSpeedEnabled then
            targetHumanoid.WalkSpeed = getgenv().WalkSpeedValue
        end
    else
        warn("No humanoid found in the target model")
    end
end

-- Function to convert knob position to speed value
local function knobToSpeed()
    local relativePosition = SliderKnob.Position.X.Scale
    local newSpeed = math.floor(relativePosition * 200) -- Map knob position to speed (0-200)
    updateWalkSpeed(newSpeed)
end

-- Dragging functionality for the slider knob
local dragging = false

SliderKnob.MouseButton1Down:Connect(function()
    dragging = true
end)

game:GetService("UserInputService").InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

game:GetService("UserInputService").InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local mousePos = input.Position.X
        local sliderPos = SliderBackground.AbsolutePosition.X
        local sliderSize = SliderBackground.AbsoluteSize.X
        local knobPos = math.clamp(mousePos - sliderPos, 0, sliderSize)

        SliderKnob.Position = UDim2.new(knobPos / sliderSize, 0, 0, 0)
        knobToSpeed() -- Update the speed as the knob is dragged
    end
end)

-- Toggle button functionality
Converted["_Toggle"].MouseButton1Click:Connect(function()
    getgenv().WalkSpeedEnabled = not getgenv().WalkSpeedEnabled
    Converted["_Toggle"].Text = getgenv().WalkSpeedEnabled and "On" or "Off"
end)

-- Hide and show UI on "Delete" key press
game:GetService("UserInputService").InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.Delete then
        uiVisible = not uiVisible
        Converted["_Frame"].Visible = uiVisible
    end
end)

-- Initial setup for WalkSpeed
updateWalkSpeed(getgenv().WalkSpeedValue)
