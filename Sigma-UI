--// Services 
local run_service = game:GetService("RunService")
local teams = game:GetService("Teams")
local players = game:GetService("Players")
local camera = workspace.CurrentCamera
local user_input_service = game:GetService("UserInputService") -- For detecting key press

--// Variables
local vec2 = Vector2.new
local storage = { esp_cache = {} }
local features = {
    box = {
        color = Color3.fromRGB(255, 255, 255),
        borderSizePixel = 1,
    },
    tracer = {
        color = Color3.fromRGB(255, 255, 255),
        thickness = 1
    },
    distance_text = {
        size = 14,
        color = Color3.fromRGB(255, 255, 255),
    },
    chams = {teamcheck = true} -- Enable teamcheck for aimbot
}

local esp_enabled = false  -- This variable controls whether ESP is enabled or not
local aimbot_enabled = false  -- This variable controls whether Aimbot is enabled or not

--// Functions

-- Get all player models in the workspace
function get_players()
    local entity_list = {}
    for _, team in ipairs(workspace.Players:GetChildren()) do
        for _, player in ipairs(team:GetChildren()) do
            if player:IsA("Model") then
                table.insert(entity_list, player)
            end
        end
    end
    return entity_list
end

-- Check if the player is an enemy
function is_enemy(player)
    local localPlayerTeam = players.LocalPlayer.Team
    local helmet = player:FindFirstChildWhichIsA("Folder") and player:FindFirstChildWhichIsA("Folder"):FindFirstChildOfClass("MeshPart")
    if not helmet then return false end

    local playerColor = helmet.BrickColor.Name
    if playerColor == "Black" and localPlayerTeam.Name == "Phantoms" then
        return false
    elseif playerColor ~= "Black" and localPlayerTeam.Name == "Ghosts" then
        return false
    end
    return true
end

-- Cache player objects for ESP
function cache_object(object)
    if not storage.esp_cache[object] then
        storage.esp_cache[object] = {
            box_square = Drawing.new("Square"),
            tracer_line = Drawing.new("Line"),
            distance_label = Drawing.new("Text") -- Create a text label for distance
        }
    end
end

-- Uncache player objects for ESP
function uncache_object(object)
    if storage.esp_cache[object] then
        for _, cached_instance in pairs(storage.esp_cache[object]) do
            cached_instance.Visible = false  -- Hide the elements
        end
        storage.esp_cache[object] = nil
    end
end

-- Get player's torso part
function get_bodypart(player, bodypart_name)
    for _, bodypart in player:GetChildren() do
        if bodypart:IsA("BasePart") then
            local mesh = bodypart:FindFirstChildOfClass("SpecialMesh")
            if mesh and mesh.MeshId == "rbxassetid://4049240078" then -- Torso MeshId
                return bodypart
            end
        end
    end
    return nil
end

--// Toggle ESP function
function toggle_esp(state)
    esp_enabled = state  -- Set the state directly based on the UI toggle
end

--// Toggle Aimbot function
function toggle_aimbot(state)
    aimbot_enabled = state  -- Set the state directly based on the UI toggle
end

-- UI Library setup (as in your original code)
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/PossiblyTom/RyftSploit/refs/heads/main/UI-Keysystem"))()
local Nytra = library.new("Nytra | Phantom Forces", 5013109572)

local main = Nytra:addPage("Main", 5012544693)
local aimbot = main:addSection("Aimbot")  
local esp = main:addSection("ESP")  

-- UI toggles
local toggle_esp_button = esp:addToggle("Toggle ESP", false, function(state)
    toggle_esp(state)  -- Connect the toggle to the ESP function
end)

local toggle_aimbot_button = aimbot:addToggle("Toggle Aimbot", false, function(state)
    toggle_aimbot(state)  -- Connect the toggle to the Aimbot function
end)

--// Aimbot Logic

local isRightClickHeld = false
local targetPart = nil -- The part to aim at

-- Function to check if the player is an ally
function is_ally(player)
    if not player then return end

    local helmet = player:FindFirstChildWhichIsA("Folder"):FindFirstChildOfClass("MeshPart")
    if not helmet then return end

    if helmet.BrickColor == BrickColor.new("Black") then
        return teams.Phantoms == players.LocalPlayer.Team, teams.Phantoms
    end

    return teams.Ghosts == players.LocalPlayer.Team, teams.Ghosts
end

-- Find the closest part with a specific decal to the screen center
local function getClosestPartToCenter()
    local closestPart = nil
    local shortestDistance = math.huge
    local screenCenter = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)

    for _, player in ipairs(get_players()) do
        local is_ally_player, _ = is_ally(player)

        if features.chams.teamcheck and is_ally_player then
            continue
        end

        local has_decals = false

        for _, child in ipairs(player:GetChildren()) do
            if child:IsA("Part") then
                for _, decal in ipairs(child:GetChildren()) do
                    if decal:IsA("Decal") and decal.Texture == "rbxassetid://5196259061" then
                        has_decals = true
                        local partPosition, onScreen = camera:WorldToViewportPoint(child.Position)
                        if onScreen then
                            local screenPosition = Vector2.new(partPosition.X, partPosition.Y)
                            local distance = (screenPosition - screenCenter).Magnitude
                            
                            if distance < shortestDistance then
                                closestPart = child
                                shortestDistance = distance
                            end
                        end
                    end
                end
            end
        end
    end

    return closestPart
end

local function aimAtTarget()
    if targetPart then
        -- Get the part's position on the screen
        local partPosition, onScreen = camera:WorldToViewportPoint(targetPart.Position)

        if onScreen then
            local mouseLocation = user_input_service:GetMouseLocation()
            local targetMousePosition = Vector2.new(partPosition.X, partPosition.Y)

            -- Calculate interpolation factor based on time elapsed
            local elapsedTime = tick() - startTime
            local interpolationFactor

            -- If time elapsed is less than 50ms, keep interpolation at 0.1
            if elapsedTime < 0.05 then
                interpolationFactor = 0.1
            elseif elapsedTime < 0.15 then
                -- Smooth transition from 0.1 to 1 over 0.1 seconds
                interpolationFactor = 0.1 + (elapsedTime - 0.05) * 9
            else
                -- After 0.1 seconds, use full interpolation
                interpolationFactor = 1
            end

            -- Interpolate between current mouse position and target part position
            local newMousePosition = mouseLocation:Lerp(targetMousePosition, interpolationFactor)

            -- Move the mouse using the new position
            getfenv().mousemoverel(newMousePosition.X - mouseLocation.X, newMousePosition.Y - mouseLocation.Y)
        end
    end
end

-- Event to start aiming when right mouse button is pressed
user_input_service.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        isRightClickHeld = true
        targetPart = getClosestPartToCenter()
    end
end)

-- Event to stop aiming when right mouse button is released
user_input_service.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        isRightClickHeld = false
        targetPart = nil
    end
end)

-- Main loop to continuously aim at the target while the right mouse button is held down
run_service.RenderStepped:Connect(function()
    if esp_enabled then
        -- Enable ESP rendering when it's toggled on
        for _, player in ipairs(get_players()) do
            if is_enemy(player) then
                cache_object(player)
            end
        end

        for player, cache in pairs(storage.esp_cache) do
            if player then
                local torso = get_bodypart(player, "Torso")
                if torso then
                    local w2s, onscreen = camera:WorldToViewportPoint(torso.Position)

                    if onscreen then
                        local scale = 1000 / (camera.CFrame.Position - torso.Position).Magnitude * 80 / camera.FieldOfView
                        local box_scale = vec2(math.round(3 * scale), math.round(4 * scale))

                        cache.box_square.Visible = true
                        cache.box_square.Color = features.box.color
                        cache.box_square.Thickness = features.box.borderSizePixel
                        cache.box_square.Position = vec2(w2s.X - box_scale.X / 2, w2s.Y - box_scale.Y / 2)
                        cache.box_square.Size = box_scale
                        cache.box_square.Filled = false

                        cache.tracer_line.Visible = true
                        cache.tracer_line.Color = features.tracer.color
                        cache.tracer_line.Thickness = features.tracer.thickness
                        cache.tracer_line.From = vec2(camera.ViewportSize.X / 2, camera.ViewportSize.Y)
                        cache.tracer_line.To = vec2(w2s.X, w2s.Y)

                        local distance = math.floor((camera.CFrame.Position - torso.Position).Magnitude)
                        cache.distance_label.Visible = true
                        cache.distance_label.Text = tostring(distance) .. " studs"
                        cache.distance_label.Size = features.distance_text.size
                        cache.distance_label.Color = features.distance_text.color
                        cache.distance_label.Center = true
                        cache.distance_label.Outline = true
                        cache.distance_label.Position = vec2(
                            cache.box_square.Position.X + (cache.box_square.Size.X / 2),
                            cache.box_square.Position.Y - 15
                        )

                    else
                        uncache_object(player)  -- Uncache object if it's off-screen
                    end
                else
                    uncache_object(player)  -- Uncache object if no torso is found
                end
            else
                uncache_object(player)
            end
        end
    end

    if aimbot_enabled and isRightClickHeld then
        aimAtTarget()
    end
end)
