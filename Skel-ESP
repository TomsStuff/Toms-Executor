-- Configuration
local BoxColor = Color3.fromRGB(255, 255, 255)
local BoxThickness = 2
local BoxTransparency = 1
local BoxHeightInStuds = 4
local BoxWidthInStuds = 1.5
local BoxOffsetInStuds = 0.39

local HealthBarWidth = 1.5 -- Fixed width for the health bar
local HealthBarOffset = 0.5 -- Offset of the health bar from the box

local SkeletonColor = Color3.fromRGB(185, 0, 200)
local SkeletonThickness = 1
local SkeletonTransparency = 1
local MaxOutOfBoundsTime = 7 -- Max time in seconds before resetting limb position

-- Services
local CoreGui = game:GetService("CoreGui")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera

-- Variables
local LocalPlayer = Players.LocalPlayer
local boxesEnabled = true
local skeletonsEnabled = true
local boxDrawings = {}
local skeletonConnections = {}
local playerConnections = {}
local Storage = Instance.new("Folder")
Storage.Name = "ESP_Storage"
Storage.Parent = CoreGui

-- Timing for limbs outside the box
local limbOutsideTime = {}

-- Track players being monitored
local monitoredPlayers = {}

-- Create and return a new box drawing
local function CreateBox()
    local box = Drawing.new("Square")
    box.Visible = false
    box.Color = BoxColor
    box.Thickness = BoxThickness
    box.Transparency = BoxTransparency
    box.Filled = false
    return box
end

-- Create and return a new health bar drawing
local function CreateHealthBar()
    local healthBar = Drawing.new("Square")
    healthBar.Visible = false
    healthBar.Color = Color3.fromRGB(0, 255, 0)  -- Green color for health
    healthBar.Thickness = 1
    healthBar.Transparency = 0.5
    healthBar.Filled = true
    return healthBar
end

-- Create and return a new line drawing
local function CreateLine()
    local line = Drawing.new("Line")
    line.Visible = false
    line.Color = SkeletonColor
    line.Thickness = SkeletonThickness
    line.Transparency = SkeletonTransparency
    return line
end

-- Wait for the character to fully load
local function WaitForCharacter(character)
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    local humanoid = character:WaitForChild("Humanoid")
    
    -- Wait for additional components if needed (like head, torso, limbs, etc.)
    local requiredParts = {
        "Head",
        "UpperTorso",
        "LowerTorso",
        "LeftUpperLeg",
        "LeftLowerLeg",
        "LeftFoot",
        "RightUpperLeg",
        "RightLowerLeg",
        "RightFoot",
        "LeftUpperArm",
        "LeftLowerArm",
        "LeftHand",
        "RightUpperArm",
        "RightLowerArm",
        "RightHand"
    }
    
    for _, partName in ipairs(requiredParts) do
        character:WaitForChild(partName)
    end
end

-- Update the position and size of the box drawing for a given character
local function UpdateBox(box, character)
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then
        box.Visible = false
        return
    end

    local rootPosition, onScreen = Camera:WorldToViewportPoint(humanoidRootPart.Position)
    if onScreen then
        local distance = (humanoidRootPart.Position - Camera.CFrame.Position).Magnitude
        local height = (Camera.ViewportSize.Y / distance) * BoxHeightInStuds
        local width = (Camera.ViewportSize.X / distance) * BoxWidthInStuds
        local offset = (Camera.ViewportSize.Y / distance) * BoxOffsetInStuds

        box.Size = Vector2.new(width, height)
        box.Position = Vector2.new(rootPosition.X - width / 2, rootPosition.Y - height / 2 + offset)
        box.Visible = true

        -- Return box position and size for use in health bar positioning
        return {
            Position = box.Position,
            Size = box.Size,
            Rotation = 0  -- Assuming no rotation, otherwise calculate as needed
        }
    else
        box.Visible = false
    end
end

-- Update the health bar drawing for a given character
local function UpdateHealthBar(healthBar, character, boxInfo)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then
        healthBar.Visible = false
        return
    end

    if boxInfo then
        local healthPercentage = humanoid.Health / humanoid.MaxHealth

        -- Use the same size as the box for the health bar's height
        local barHeight = boxInfo.Size.Y * healthPercentage
        local barWidth = boxInfo.Size.X / 14.2 -- Make the health bar narrower

        -- Position the health bar to the left of the box
        healthBar.Size = Vector2.new(barWidth, boxInfo.Size.Y)
        healthBar.Position = Vector2.new(boxInfo.Position.X - barWidth - 2, boxInfo.Position.Y)
        healthBar.Color = Color3.fromRGB(255 - (healthPercentage * 255), healthPercentage * 255, 0) -- Color changes with health
        healthBar.Visible = true
    else
        healthBar.Visible = false
    end
end

local function UpdateSkeleton(character, skeletonLines)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    local parts = {
        character:FindFirstChild("Head"),
        character:FindFirstChild("UpperTorso"),
        character:FindFirstChild("LowerTorso"),
        character:FindFirstChild("LeftUpperLeg"),
        character:FindFirstChild("LeftLowerLeg"),
        character:FindFirstChild("LeftFoot"),
        character:FindFirstChild("RightUpperLeg"),
        character:FindFirstChild("RightLowerLeg"),
        character:FindFirstChild("RightFoot"),
        character:FindFirstChild("LeftUpperArm"),
        character:FindFirstChild("LeftLowerArm"),
        character:FindFirstChild("LeftHand"),
        character:FindFirstChild("RightUpperArm"),
        character:FindFirstChild("RightLowerArm"),
        character:FindFirstChild("RightHand")
    }

    -- Connections for the skeleton lines
    local connections = {
        {parts[1], parts[2]}, -- Head to UpperTorso
        {parts[2], parts[3]}, -- UpperTorso to LowerTorso
        {parts[3], parts[4]}, -- LowerTorso to LeftUpperLeg
        {parts[4], parts[5]}, -- LeftUpperLeg to LeftLowerLeg
        {parts[5], parts[6]}, -- LeftLowerLeg to LeftFoot
        {parts[3], parts[7]}, -- LowerTorso to RightUpperLeg
        {parts[7], parts[8]}, -- RightUpperLeg to RightLowerLeg
        {parts[8], parts[9]}, -- RightLowerLeg to RightFoot
        {parts[2], parts[10]}, -- UpperTorso to LeftUpperArm
        {parts[10], parts[11]}, -- LeftUpperArm to LeftLowerArm
        {parts[11], parts[12]}, -- LeftLowerArm to LeftHand
        {parts[2], parts[13]}, -- UpperTorso to RightUpperArm
        {parts[13], parts[14]}, -- RightUpperArm to RightLowerArm
        {parts[14], parts[15]} -- RightLowerArm to RightHand
    }

    return RunService.RenderStepped:Connect(function()
        local allVisible = true
        for i, line in ipairs(skeletonLines) do
            local startPart, endPart = unpack(connections[i])
            if startPart and endPart then
                local startPos, startOnScreen = Camera:WorldToViewportPoint(startPart.Position)
                local endPos, endOnScreen = Camera:WorldToViewportPoint(endPart.Position)
                
                if startOnScreen and endOnScreen then
                    line.From = Vector2.new(startPos.X, startPos.Y)
                    line.To = Vector2.new(endPos.X, endPos.Y)
                    line.Visible = skeletonsEnabled
                else
                    line.Visible = false
                    allVisible = false
                end
            else
                line.Visible = false
                allVisible = false
            end
        end

        -- If no lines are visible, you may want to hide or reset other related components
        if not allVisible then
            -- Handle cases where all skeleton lines are off-screen
        end
    end)
end

-- Clear ESP components for a given player
local function ClearESP(player)
    if boxDrawings[player] then
        local data = boxDrawings[player]
        data.Box:Destroy()
        data.HealthBar:Destroy()
        for _, line in pairs(data.SkeletonLines) do
            line:Destroy()
        end
        boxDrawings[player] = nil
    end
    if skeletonConnections[player] then
        skeletonConnections[player]:Disconnect()
        skeletonConnections[player] = nil
    end
    if playerConnections[player] then
        playerConnections[player]:Disconnect()
        playerConnections[player] = nil
    end
    monitoredPlayers[player] = nil
end

-- Setup ESP components for a given character
local function SetupESP(character, player)
    -- Clear existing ESP components if any
    ClearESP(player)

    -- Wait for character and its components to be fully loaded
    WaitForCharacter(character)

    -- Box setup
    local box = CreateBox()
    local healthBar = CreateHealthBar()

    local skeletonLines = {}
    for i = 1, 14 do
        local line = CreateLine()
        table.insert(skeletonLines, line)
        line.Parent = Storage
    end

    boxDrawings[player] = {
        Box = box,
        HealthBar = healthBar,
        SkeletonLines = skeletonLines
    }

    -- Update connections
    playerConnections[player] = RunService.RenderStepped:Connect(function()
        local boxInfo = UpdateBox(box, character)
        if boxInfo then
            UpdateHealthBar(healthBar, character, boxInfo)
        else
            healthBar.Visible = false -- Hide health bar if box is not visible
        end
    end)

    local connection = UpdateSkeleton(character, skeletonLines)
    skeletonConnections[player] = connection

    character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
        ClearESP(player)
    end)
end

-- Handle player ESP setup
local function HandlePlayerESP(player)
    if player == LocalPlayer then
        return -- Do not apply ESP to the local player
    end
    if not monitoredPlayers[player] then
        local character = player.Character or player.CharacterAdded:Wait()
        SetupESP(character, player)
        player.CharacterAdded:Connect(function()
            local newCharacter = player.Character or player.CharacterAdded:Wait()
            SetupESP(newCharacter, player)
        end)
        monitoredPlayers[player] = true
    end
end

-- Check for new players and add ESP if necessary
local function CheckForNewPlayers()
    while true do
        for _, player in ipairs(Players:GetPlayers()) do
            if boxesEnabled and not monitoredPlayers[player] then
                HandlePlayerESP(player)
            end
        end
        wait(0.5)
    end
end

-- Toggle the visibility of ESP components
local function ToggleESP()
    boxesEnabled = not boxesEnabled
    skeletonsEnabled = not skeletonsEnabled

    if boxesEnabled or skeletonsEnabled then
        if not RunService:IsRunning() then
            CheckForNewPlayers() -- Start checking for new players
        end

        for _, player in ipairs(Players:GetPlayers()) do
            if not monitoredPlayers[player] and boxesEnabled then
                HandlePlayerESP(player)
            end
        end
    else
        for _, data in pairs(boxDrawings) do
            data.Box:Destroy()
            data.HealthBar:Destroy()
            for _, line in pairs(data.SkeletonLines) do
                line:Destroy()
            end
        end
        boxDrawings = {}

        for _, connection in pairs(playerConnections) do
            connection:Disconnect()
        end
        playerConnections = {}

        for _, item in ipairs(Storage:GetChildren()) do
            item:Destroy()
        end

        for _, conn in pairs(skeletonConnections) do
            conn:Disconnect()
        end
        skeletonConnections = {}
    end
end

-- Input handling to toggle ESP
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.K then
        ToggleESP()
    end
end)

-- Handle new players joining
Players.PlayerAdded:Connect(function(player)
    if boxesEnabled then
        HandlePlayerESP(player)
    end
end)

-- Handle existing players on script run
if LocalPlayer and LocalPlayer.Character then
    -- Player is already spawned
    for _, player in ipairs(Players:GetPlayers()) do
        if boxesEnabled then
            HandlePlayerESP(player)
        end
    end
else
    -- Wait for player to be fully spawned
    Players.PlayerAdded:Connect(function(player)
        if player == LocalPlayer and player.Character then
            for _, player in ipairs(Players:GetPlayers()) do
                if boxesEnabled then
                    HandlePlayerESP(player)
                end
            end
        end
    end)
end

-- Handle players leaving
Players.PlayerRemoving:Connect(function(player)
    ClearESP(player)
end)
